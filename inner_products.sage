def inner_product(B, x, y):
    """Returns x^T * B * y 
    B: n by n matrix
    x, y: n dim row vectors
    """
    prod = x * B * y
    return prod
def my_gram_schmidt(B, basis):
    """input: 
    B defines inner product,
    basis: list of basis vectors
    """
    GS_basis = [basis[0]]
    for i in range(1, len(basis)):
        bistar = basis[i]
        for j in range(i - 1, -1, -1):
            scalar_proj = inner_product(B, basis[i], GS_basis[j]) / inner_product(B, GS_basis[j], GS_basis[j])
            bistar = bistar - scalar_proj * GS_basis[j]
        GS_basis.append(bistar)
    return GS_basis

def gram_matrix(Ta, Tb, Tab, Na, Nb):
    """Returns the Gram matrix of the order generated by 1, a, b, ab, where Ta = trace(a) etc..."""
    G = Matrix([[2, Ta, Tb, Tab], 
                [Ta, 2*Na, Ta*Tb-Tab, Na*Tb],
                [Tb, Ta*Tb-Tab, 2*Nb, Nb*Ta], 
                [Tab, Na*Tb, Nb*Ta, 2*Na*Nb]])
    return G